@startuml
title Java Collections 
interface Iterator<E> {
    boolean hasNext()
    E next()
}
interface Iterable<T> {
    Iterator<T> iterator()
}

interface Collection<E> {
    int size()
    boolean isEmpty()
    boolean contains()
    Object[] toArray()
    <T> T[] toArray(T[] a)
    boolean add(E e)
    boolean remove(Object o)
    boolean containsAll(Collection<?> c)
    boolean addAll(Collection<? extends E> c)
    boolean removeAll(Collection<?> c)
    boolean retainAll(Collection<?> c)
    void clear()
    boolean equals(Object o)
    int hashCode()
}

interface List<E>{
    E get(int index)
    E set(int index, E element)
    void add(int index, E element)
    E remove(int index)
    int indexOf(Object o)
    int lastIndexOf(Object o)
    ListIterator<E> listIterator()
    ListIterator<E> listIterator(int index)
    List<E> subList(int fromIndex, int toIndex)
}


interface Set<E> {
    
}

abstract class AbstractCollection<E> {
    实现了Collection中的基本操作，通过自身iterator方法就能读写collection中的元素。如：
    boolean remove(Object o): 通过自身iterator找到o并remove

}

abstract class AbstractList<E> {
    在AbstractCollection的基础上，进一步实现随机存储list这种类型的基本操作，如：
    int indexOf(Object o)： 通过自身iterator找到o的位置并返回
} 

class ArrayList<E>  {
    Object[] elementData：围绕此数组，实现数组对象列表
    实现了iterator，从AbstractList继承的基本操作与elementData关联起来了
}

interface Queue<E> {
    继承自Collection
    boolean offer(E e)
    E remove() 取走头e，Q为空时，异常
    E poll()  取走头e，Q为空时，返空
    E element() 查看头e，Q为空时，异常
    E peek() 查看头e，Q为空时，返空

}
Collection <|-- Queue
interface Deque<E> {
    双端队列addfirst, addLast等
}
abstract class AbstractSequentialList<E>  {
    继承随机存储的AbstractList，方法没有变化，仍然通过api描述来限定为顺序读写的list
}

class LinkedList<E> {
    围绕下面两个链表，实现一个双端队列
    Node<E> first
    Node<E> last
}

Iterator <-- Iterable
Iterable <|-- Collection
Collection <|-- List
Collection <|.. AbstractCollection
AbstractCollection <|.. AbstractList
List <|-- AbstractList
AbstractList <|.. ArrayList
List <|-- ArrayList


List <|.. LinkedList
Queue <|-- Deque
Deque <|.. LinkedList
Queue <|.. LinkedList
AbstractList <|-- AbstractSequentialList
AbstractSequentialList <|-- LinkedList


interface Map<K, V>{
    interface Entry<K,V>{}
    V put(K key, V value)
    V get(K key)
    V remove(K key)
    int size()
    boolean isEmpty()
    Set<Map.Entry<K,V>> entrySet()
    Set<K> keySet()
    Collection<V> values()
}
abstract class AbstractQueue<E> {
    继承自AbstractCollection，同时围绕迭代器实现了队列的一些基本操作：
    poll()
}

AbstractCollection <|--  AbstractQueue
Queue  <|.. AbstractQueue

@enduml

